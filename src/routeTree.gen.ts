/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DemoRouteImport } from './routes/demo'
import { Route as IndexRouteImport } from './routes/index'
import { Route as RemoteIndexRouteImport } from './routes/remote/index'
import { Route as DemoTanstackQueryRouteImport } from './routes/demo/tanstack-query'
import { Route as DemoTableRouteImport } from './routes/demo/table'
import { Route as DemoStoreRouteImport } from './routes/demo/store'
import { Route as DemoFormSimpleRouteImport } from './routes/demo/form.simple'
import { Route as DemoFormAddressRouteImport } from './routes/demo/form.address'

const DemoRoute = DemoRouteImport.update({
  id: '/demo',
  path: '/demo',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const RemoteIndexRoute = RemoteIndexRouteImport.update({
  id: '/remote/',
  path: '/remote/',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoTanstackQueryRoute = DemoTanstackQueryRouteImport.update({
  id: '/tanstack-query',
  path: '/tanstack-query',
  getParentRoute: () => DemoRoute,
} as any)
const DemoTableRoute = DemoTableRouteImport.update({
  id: '/table',
  path: '/table',
  getParentRoute: () => DemoRoute,
} as any)
const DemoStoreRoute = DemoStoreRouteImport.update({
  id: '/store',
  path: '/store',
  getParentRoute: () => DemoRoute,
} as any)
const DemoFormSimpleRoute = DemoFormSimpleRouteImport.update({
  id: '/form/simple',
  path: '/form/simple',
  getParentRoute: () => DemoRoute,
} as any)
const DemoFormAddressRoute = DemoFormAddressRouteImport.update({
  id: '/form/address',
  path: '/form/address',
  getParentRoute: () => DemoRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/demo': typeof DemoRouteWithChildren
  '/demo/store': typeof DemoStoreRoute
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/remote': typeof RemoteIndexRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/demo': typeof DemoRouteWithChildren
  '/demo/store': typeof DemoStoreRoute
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/remote': typeof RemoteIndexRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/demo': typeof DemoRouteWithChildren
  '/demo/store': typeof DemoStoreRoute
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/remote/': typeof RemoteIndexRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/demo'
    | '/demo/store'
    | '/demo/table'
    | '/demo/tanstack-query'
    | '/remote'
    | '/demo/form/address'
    | '/demo/form/simple'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/demo'
    | '/demo/store'
    | '/demo/table'
    | '/demo/tanstack-query'
    | '/remote'
    | '/demo/form/address'
    | '/demo/form/simple'
  id:
    | '__root__'
    | '/'
    | '/demo'
    | '/demo/store'
    | '/demo/table'
    | '/demo/tanstack-query'
    | '/remote/'
    | '/demo/form/address'
    | '/demo/form/simple'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DemoRoute: typeof DemoRouteWithChildren
  RemoteIndexRoute: typeof RemoteIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/demo': {
      id: '/demo'
      path: '/demo'
      fullPath: '/demo'
      preLoaderRoute: typeof DemoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/remote/': {
      id: '/remote/'
      path: '/remote'
      fullPath: '/remote'
      preLoaderRoute: typeof RemoteIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryRouteImport
      parentRoute: typeof DemoRoute
    }
    '/demo/table': {
      id: '/demo/table'
      path: '/table'
      fullPath: '/demo/table'
      preLoaderRoute: typeof DemoTableRouteImport
      parentRoute: typeof DemoRoute
    }
    '/demo/store': {
      id: '/demo/store'
      path: '/store'
      fullPath: '/demo/store'
      preLoaderRoute: typeof DemoStoreRouteImport
      parentRoute: typeof DemoRoute
    }
    '/demo/form/simple': {
      id: '/demo/form/simple'
      path: '/form/simple'
      fullPath: '/demo/form/simple'
      preLoaderRoute: typeof DemoFormSimpleRouteImport
      parentRoute: typeof DemoRoute
    }
    '/demo/form/address': {
      id: '/demo/form/address'
      path: '/form/address'
      fullPath: '/demo/form/address'
      preLoaderRoute: typeof DemoFormAddressRouteImport
      parentRoute: typeof DemoRoute
    }
  }
}

interface DemoRouteChildren {
  DemoStoreRoute: typeof DemoStoreRoute
  DemoTableRoute: typeof DemoTableRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
  DemoFormAddressRoute: typeof DemoFormAddressRoute
  DemoFormSimpleRoute: typeof DemoFormSimpleRoute
}

const DemoRouteChildren: DemoRouteChildren = {
  DemoStoreRoute: DemoStoreRoute,
  DemoTableRoute: DemoTableRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
  DemoFormAddressRoute: DemoFormAddressRoute,
  DemoFormSimpleRoute: DemoFormSimpleRoute,
}

const DemoRouteWithChildren = DemoRoute._addFileChildren(DemoRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DemoRoute: DemoRouteWithChildren,
  RemoteIndexRoute: RemoteIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
